import React from 'react';
import { Text, View, Image, TouchableOpacity, StyleSheet ,Button} from 'react-native';
import Calculator from './screen1';
import Calculator1 from './screen2';
import { buttonarray, styles } from './ButtonArray';
export default class app extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      button: buttonarray,
      add: '',
      indexarray: [],
      operator: ['+', '-', '%', '*', '/'],
    };
  }
  handlebuttonclicked = (item, lo) => {
    console.log('item-->', lo);
    if (item.name !== '=') {
      this.state.add = this.state.add + item.name;
      this.rest = this.state.add;
      // console.log(this.state.add,"add")
      // console.log(this.rest,"rest")
    } else {
      // console.log("one")
      let indexArray = [];
      for (let i = 0; i < this.state.add.length; i++) {
        for (let j = 0; j < this.state.operator.length; j++) {
          if (this.state.add[i] === this.state.operator[j]) {
            indexArray.push({
              id: indexArray.length + 1,
              operator: this.state.add[i],
              indexFound: i,
            });
          }
        }
      }
      // console.log("two","indexArray-->",indexArray)
      let startingIndex = 0;
      let foundNumber = [];
      for (let k = 0; k < indexArray.length + 1; k++) {
        // console.log("startingIndex-->",startingIndex,k===indexArray.length?null:indexArray[k].indexFound)
        let temp =
          k === indexArray.length
            ? this.state.add.substring(startingIndex)
            : this.state.add.substring(startingIndex, indexArray[k].indexFound);
        // console.log(k,"temp-->",temp)
        foundNumber.push(temp);
        startingIndex =
          k === indexArray.length ? null : indexArray[k].indexFound + 1;
      }
      let result;
      for (let l = 0; l < indexArray.length; l++) {
        if (indexArray[l].operator === '+') {
          // console.log("one--1")
          result =
            l === 0
              ? parseInt(foundNumber[l]) + parseInt(foundNumber[l + 1])
              : result + foundNumber[l + 1];
        }
        if (indexArray[l].operator === '-') {
          // console.log("two--2")
          result =
            l === 0
              ? parseInt(foundNumber[l]) - parseInt(foundNumber[l + 1])
              : result - foundNumber[l + 1];
        }

        if (indexArray[l].operator === '*') {
          // console.log("three--3")
          result =
            l === 0
              ? parseInt(foundNumber[l]) * parseInt(foundNumber[l + 1])
              : result * foundNumber[l + 1];
        }
        if (indexArray[l].operator === '/') {
          // console.log("three--3")
          result =
            l === 0
              ? parseInt(foundNumber[l]) / parseInt(foundNumber[l + 1])
              : result / foundNumber[l + 1];
        }
      }
      this.total = result;
    }

    this.setState({});
  };
  handledeleted = () => {
    this.state.add = '';
    this.setState({});
    this.total = '';
  };
  handleclear = () => {
    this.state.add = this.state.add.substring(0, this.state.add.length - 1);
    this.setState({});
  };
  handlerestore = () => {
    this.state.add = this.rest;

    this.setState({ add: this.state.add });
  };
  render() {
    // console.log(this.props,"lokfrfesh")
    return (
      <View style={{ flex: 1, backgroundColor: 'red' }}>
        <Calculator
          handleclear={this.handleclear}
          handledeleted={this.handledeleted}
          add={this.state.add}
          cointainer={styles.cointainer}
          restore={styles.restore}
          cointainer1={styles.cointainer1}
          cointainer2={styles.cointainer2}
          cointainer3={styles.cointainer3}
          cointainer4={styles.cointainer4}
          cointainer5={styles.cointainer5}
        />
        <View style={{height:300,width:300,backgroundColor:"grey"}}>
          <View
            style={{flexDirection:"row",
            flexWrap:"wrap",
            backgroundColor: 'orange',
            }}>
            {this.state.button.map((el) => {
              return (
                <View
                  style={{
                    margin:1,
                    backgroundColor: 'yellow',
                    
                  }}>
                  <Calculator1
                  height={100}
                    width={93}
                    backgroundColor={'grey'}
                    name={el.name}
                    color={'white'}
                    handledeleted={this.handlebuttonclicked}
                    item={el}
                  />
                </View>
              
              );
            })}
          </View>
      
</View>
        <Calculator1
          height={10}
          width={60}
          backgroundColor={'red'}
          name={'DELETE'}
          color={'white'}
          handledeleted={this.handledeleted}
        />

        <Calculator1
          height={10}
          width={60}
          backgroundColor={'blue'}
          name={'clear'}
          color={'white'}
          handledeleted={this.handleclear}
        />
        <Calculator1
          height={10}
          width={60}
          backgroundColor={'pink'}
          name={'restore'}
          color={'white'}
          handledeleted={this.handlerestore}
        />
      </View>
    );
  }
}
